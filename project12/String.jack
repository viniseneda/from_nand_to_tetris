// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array str, temp;
	field Int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength = 0) {let str = Array.new(1);}
		else {let str = Array.new(maxLength);}
		let length = 0;
		let temp = Array.new(16);
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do str.dispose();
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		let str[length] = c;
		let length = length + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let length = length - 1;		
		let str[length] = 0;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int counter, i, a, d;
		let counter = 0;
		if (str[0] = 45) {let counter = 1;}
		while ((str[counter] > 47) & (str[counter] < 58))
		{
			let temp[i] = str[counter];
			let counter = counter + 1;
			let i = i + 1;
		}
		let i = i;
		let counter = 0;
		//Do Output.printString(
		while (counter < i)
		{
			let d = temp[counter] - 48;
			let a = (a*10) + d;
			let counter = counter + 1;
		}
		if (str[0] = 45) {let a = a * -1;} 
		return a;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int counter, a, b;
		
		let a = val;
		let length = 0;
		if (a < 0) {let a = a * -1;}
		let counter = 0;
		while (~((String.modulo(a, 10) = 0) & (a / 10 = 0)))
		{
			let temp[counter] = String.modulo(a, 10);
			let a = a / 10;
			let counter = counter + 1;
		}
		let a = 0;
		if (val < 0) {let str[length] = 45; let length = length + 1;}
		while (a < counter)
		{
			let b = counter - a - 1;
			let str[length + a] = temp[b] + 48;
			let a = a + 1;
		}
		let length = length + counter;
		return;
    }
	
	function int modulo(int i, int b)
	{
		return i - ((i/b)*b);
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
