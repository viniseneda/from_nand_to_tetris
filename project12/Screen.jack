// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static boolean color;
	static Array twoOf;

    /** Initializes the Screen. */
    function void init() {
		var int i, b;
		let color = true;
		
		let twoOf = Array.new(16);
		let i = 0;
		let b = 1;
		while (i < 16)
		{
			let twoOf[i] = b;
			let i = i + 1;
			let b = b + b;
		}
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
	return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {

		if (twoOf = 0) {do Screen.init();}
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address, value;

		if (twoOf = 0) {do Screen.init();}
		let address = (32 * y) + (x / 16);
		let value = Memory.peek(16384 + address);
		
		//do Output.printInt(32 * y);
		//do Output.println();
		//do Output.printInt(x / 16);
		//do Output.println();
		//do Output.printInt(address);
		//do Output.println();

		if (color) {
			let value = value | twoOf[(x - ((x / 16) * 16))]; // fix this logic
			//do Output.printInt(15 - (x - ((x / 16) * 16)));
			//do Output.println(); 
		}
		else
		{
			let value = value & (~twoOf[(x - ((x / 16) * 16))]);
		}
		
		do Memory.poke(16384 + address, value);
		return;
		
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int dx, dy, diff, a, b, temp;
		if (twoOf = 0) {do Screen.init();}
		
		let a = 0;
		let b = 0;
		let diff = 0;

		let dx = x2 - x1;
		let dy = y1 - y2;
		
		if (dx < 0) {
			let dx = x1 - x2;
			let dy = y2 - y1;
			let temp = x1;
			let x1 = x2;
			let x2 = temp;
			let temp = y1;
			let y1 = y2;
			let y2 = temp;}
		if (dx = 0)
		{
			let temp = Math.min(y1, y2);
			let a = Math.max(y1,y2);
			while (temp < (a + 1))
			{
				do Screen.drawPixel(x1, temp);
				let temp = temp + 1;
			}
			return;
		}
		if (dy = 0)
		{
			let temp = Math.min(x1, x2);
			let a = Math.max(x1,x2);
			while (temp < (a + 1))
			{
				do Screen.drawPixel(temp, y1);
				let temp = temp + 1;
			}
			return;
		}
		if (dy < 0)
		{
			let dy = dy * -1;
			while (( (a < dx) & (~(a = dx)) ) & ( (b < dy) & (~(b = dy)) ))
			{
				do Screen.drawPixel(x1 + a, y1 + b);
				//do Output.printInt(diff);
				//do Output.println();
				if ((diff < 0) ) {let b = b + 1; let diff = diff + dx;}
				else {let a = a + 1; let diff = diff - dy;}
			}
			return;
		}
		
		while (( (a < dx) & (~(a = dx)) ) & ( ((-b) < dy) & (~((-b) = dy)) ))
		{
			do Screen.drawPixel(x1 + a, y1 + b);
			//do Output.printInt(diff);
			//do Output.println();
			if ((diff < 0) ) {let b = b - 1; let diff = diff + dx;}
			else {let a = a + 1; let diff = diff - dy;}
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int a, b, c, d;

		let a = Math.min(y1, y2);
		let b = Math.max(y1, y2);
		while (a < (b + 1))
		{
			do Screen.drawLine(x1, a, x2, a);
			let a = a + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
	var int dy, temp;

	let dy = - r;
	if ((r > 181) | (r = 181)) {return;}
	while (dy < r)
	{
		let temp = Math.sqrt((r*r) - (dy*dy));
		do Screen.drawLine(x - temp, y + dy, x + temp, y + dy);
		let dy = dy + 1;
	}
	return;
    }
}
