// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a[15]=true, a[5]=true, a[4..14]=false, a[0..2]=false, b[15]=false, b[0..14]=instruction[0..14], sel=instruction[15], out[15]=o, out[12]=a,
 out[6]=no, out[7]=f, out[8]=ny, out[9]=zy, out[10]=nx, out[11]=zx,
 out[3]=writeM, out[4]=destD, out[5]=destA, out[0..2]=jump);


    Mux16(a=aluout, b=instruction, sel=o, out=toregisterA);
    ARegister(in=toregisterA, load=destA, out=Aregisterout, out[0..14]=addressM);
    Mux16(a=Aregisterout, b=inM, sel=a, out=toALUb);
    DRegister(in=aluout, load=destD, out=toALUa);
    ALU(x=toALUa, y=toALUb, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=aluout, out=outM, zr=zr, ng=ng);
    
    Control(control=jump, zr=zr, ng=ng, out=outjump);
    PC(in=Aregisterout, load=outjump, inc=true, reset=reset, out[0..14]=pc);
}